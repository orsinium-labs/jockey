[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "jockey"
authors = [{ name = "Gram", email = "git@orsinium.dev" }]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.8"
dynamic = ["version", "description"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Typing :: Typed",
]
keywords = [
    "nats",
    "dramatiq",
    "celery",
    "microservices",
    "rabbitmq",
    "arq",
    "rq",
    "huey",
    "event-driven",
    "distributed",
    "web",
    "framewrok",
    "web framework",
    "asyncio",
]
dependencies = []

[project.optional-dependencies]
test = ["pytest", "pytest-cov", "pytest-asyncio"]
lint = ["ruff", "mypy"]

[project.urls]
Source = "https://github.com/orsinium-labs/jockey"

[tool.mypy]
files = ["jockey", "tests"]
python_version = 3.8
ignore_missing_imports = true
# follow_imports = "silent"
show_error_codes = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = [
    "--cov=jockey",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=97",
]
asyncio_mode = "auto"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING",
    "    pass",
    "except ImportError:",
    "raise NotImplementedError",
]

[tool.coverage.run]
branch = true

[tool.ruff]
line-length = 90
select = [
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "COM",   # flake8-commas
    "E",     # pycodestyle
    "F",     # pyflakes
    "FURB",  # refurb
    "I",     # isort
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PTH",   # flake8-use-pathlib
    "Q",     # flake8-quotes
    "RUF",   # Ruff-specific rules
    "SIM",   # flake8-simplify
    "W",     # pycodestyle
]
ignore = [
    "B008",    # allow to perorm function call in arguments
    "B904",    # allow to `raise` from `except`
    "PIE790",  # allow unnecessary pass statements
    "PLR0913", # allow more than 5 parameters in a function
    "PLR2004", # allow hardcoded constants
    "PLW2901", # allow overriding loop variable
    "SIM117",  # allow nested with
]
target-version = "py38"

[tool.ruff.flake8-quotes]
inline-quotes = "single"
